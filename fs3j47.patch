diff --git a/src/trainer_slide.c b/src/trainer_slide.c
index 1606ae5155..c44ee5611b 100644
--- a/src/trainer_slide.c
+++ b/src/trainer_slide.c
@@ -59,14 +59,14 @@ static const u8* const sTrainerSlides[DIFFICULTY_COUNT][TRAINERS_COUNT][TRAINER_
     },
 };
 
-static const u8* const sFrontierTrainerSlides[DIFFICULTY_COUNT][TRAINERS_COUNT][TRAINER_SLIDE_COUNT] =
+static const u8* const sFrontierTrainerSlides[DIFFICULTY_COUNT][FRONTIER_TRAINERS_COUNT][TRAINER_SLIDE_COUNT] =
 {
     [DIFFICULTY_NORMAL] =
     {
     },
 };
 
-static const u8* const sTestTrainerSlides[DIFFICULTY_COUNT][FRONTIER_TRAINERS_COUNT][TRAINER_SLIDE_COUNT] =
+static const u8* const sTestTrainerSlides[DIFFICULTY_COUNT][TRAINERS_COUNT][TRAINER_SLIDE_COUNT] =
 {
 #include "../test/battle/trainer_slides.h"
 };
@@ -107,24 +107,34 @@ static u32 GetEnemyMonCount(u32 firstId, u32 lastId, bool32 onlyAlive)
     return count;
 }
 
-static bool32 DoesTrainerHaveSlideMessage(enum DifficultyLevel difficulty, u32 trainerId, u32 slideId)
+static const u8* const (*GetTrainerSlideArray(enum DifficultyLevel difficulty, u32 trainerId, u32 slideId))[TRAINER_SLIDE_COUNT]
 {
     if (gBattleTypeFlags & BATTLE_TYPE_FRONTIER)
-        return (sFrontierTrainerSlides[difficulty][trainerId][slideId] != NULL);
+        return &sFrontierTrainerSlides[difficulty][trainerId];
     else if (TESTING)
-        return (sTestTrainerSlides[difficulty][trainerId][slideId] != NULL);
+        return &sTestTrainerSlides[difficulty][trainerId];
     else
-        return (sTrainerSlides[difficulty][trainerId][slideId] != NULL);
+        return &sTrainerSlides[difficulty][trainerId];
+}
+
+static bool32 DoesTrainerHaveSlideMessage(enum DifficultyLevel difficulty, u32 trainerId, u32 slideId)
+{
+    const u8* const (*trainerSlides)[TRAINER_SLIDE_COUNT] = GetTrainerSlideArray(difficulty, trainerId, slideId);
+
+    if ((*trainerSlides)[slideId] == NULL)
+        return ((*trainerSlides)[DIFFICULTY_NORMAL] != NULL);
+    else
+        return TRUE;
 }
 
 void SetTrainerSlideMessage(enum DifficultyLevel difficulty, u32 trainerId, u32 slideId)
 {
-    if (gBattleTypeFlags & BATTLE_TYPE_FRONTIER)
-        gBattleStruct->trainerSlideMsg = sFrontierTrainerSlides[difficulty][trainerId][slideId];
-    else if (TESTING)
-        gBattleStruct->trainerSlideMsg = sTestTrainerSlides[difficulty][trainerId][slideId];
+    const u8* const (*trainerSlides)[TRAINER_SLIDE_COUNT] = GetTrainerSlideArray(difficulty, trainerId, slideId);
+
+    if ((*trainerSlides)[slideId] != NULL)
+        gBattleStruct->trainerSlideMsg = (*trainerSlides)[slideId];
     else
-        gBattleStruct->trainerSlideMsg = sTrainerSlides[difficulty][trainerId][slideId];
+        gBattleStruct->trainerSlideMsg = (*trainerSlides)[DIFFICULTY_NORMAL];
 }
 
 static bool32 ShouldRunTrainerSlidePlayerLandsFirstCriticalHit(enum TrainerSlideType slideId)
